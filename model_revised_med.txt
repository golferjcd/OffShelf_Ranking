### OOT Validation/Testing
### January A Predictions

con <- dbConnect(odbc::odbc(),"WFM Prod",password="")

dbGetQuery(con, "Create volatile table promo_info as (
           With temp1 as 
           (SELECT PROMOTION_EVENT_ID, l.PROMO_LEVEL, CATEGORY, PROMOTION_STATUS_ID, RETAIL_START_DATE
           FROM EDW_R.PRM_PROMOTION_EVENT_V
           INNER JOIN EDW_R.PRM_PROMO_LEVEL_V as l ON l.PROMO_LEVEL_ID = PRM_PROMOTION_EVENT_V.PROMO_LEVEL_ID
           WHERE (PROMOTION_STATUS_ID = 5 OR PROMOTION_STATUS_ID = 1) AND PROMO_LEVEL = 'Off Shelf'),
           temp2 as
           (SELECT d.DAY_IDNT, d.PROMO_WEEK, p.START_DATE, p.PROMO_PERIOD
           FROM ((EDW_R.PROMO_DAY_V as d
           INNER JOIN EDW_R.PROMO_WEEK_V as w ON d.PROMO_WEEK = w.PROMO_WEEK)
           INNER JOIN EDW_R.PROMO_PERIOD_V as p ON p.PROMO_PERIOD = w.PROMO_PERIOD)),
           temp3 as
           (SELECT	COUNT(BRAND) as nbr_brands_in_category, CATEGORY_DESC
           FROM WDM_X.AA_ITEM_NATIONAL_HIERARCHY_V
           GROUP BY CATEGORY_DESC)
           SELECT temp1.RETAIL_START_DATE, i.DIGIT_UPC, temp1.PROMO_LEVEL,h.FAMILY_DESC, h.CATEGORY_DESC, h.SUBCATEGORY_DESC, h.BRAND, temp2.DAY_IDNT, temp2.PROMO_PERIOD, 
           temp1.PROMOTION_EVENT_ID, row_number()  over(partition by i.DIGIT_UPC order by temp2.DAY_IDNT) as nbr_days_offshelf,  row_number()  over(partition by i.DIGIT_UPC order by temp2.DAY_IDNT)/14 as nbr_periods_offshelf, temp3.nbr_brands_in_category
           FROM ((((temp1
           INNER JOIN  EDW_R.PRM_PROMOTION_ITEM_V as i ON i.PROMOTION_EVENT_ID = temp1.PROMOTION_EVENT_ID)
           INNER JOIN temp2 ON temp1.RETAIL_START_DATE = temp2.START_DATE)
           INNER JOIN wdm_x.AA_ITEM_NATIONAL_HIERARCHY_V as h ON i.DIGIT_UPC = h.NAT_UPC)
           INNER JOIN temp3 ON h.CATEGORY_DESC = temp3.CATEGORY_DESC)
           WHERE DAY_IDNT BETWEEN '2016-01-01' AND '2019-01-29' AND FAMILY_DESC not in ('Supplements', 'Body Care', 'Lifestyle', 'Meat', 'Produce'))
           with data primary index (DAY_IDNT
           ,DIGIT_UPC) on commit preserve rows;")

############################ Second Query ###########################################################


dbGetQuery(con,"create volatile table insights as                                            
           (
           select pool.*
           
           from (select base.upc
           ,count(base.region_id) as regions
           ,average(base.net_units) as avg_units
           ,average(base_cogs_dlrs) as avg_cogs
           
           from (select b.region_id
           ,a.upc
           ,sum(a.net_units) as net_units
           ,sum(a.BASE_COGS_DLRS) as BASE_COGS_DLRS
           
           from (select upc, day_idnt, store_number, (zeroifnull(sum(SALE_UNITS))+zeroifnull(sum(RETURN_SALE_UNITS))+zeroifnull(sum(MISC_SALE_UNITS))-zeroifnull(sum(ADJUST_UNITS)))  as net_units
           ,ZEROIFNULL(SUM(AVG_COST * (SALE_UNITS + RETURN_SALE_UNITS)))
           AS BASE_COGS_DLRS
           
           from EDW_R.DAILY_SALES_COST_SUMMARY_V as a
           where upc in (SELECT DISTINCT DIGIT_UPC FROM promo_info WHERE PROMO_LEVEL= 'Off Shelf') and day_idnt between '2016-01-01' and '2018-10-03'                                                                              /* EDIT Insights Time Period */
           group by upc, day_idnt, store_number)  as a 
           inner join edw_r.location_v as b on a.store_number=b.store_number
           and region_id not in (1,-1)              /* Excludes UK and some of Canada */
           and THREE_SIX_FIVE  is null
           and b.store_closing_date is null
           and b.currency='USD'                     /* Excludes remaining Canada stores */
           group by  b.region_id
           ,a.upc) as base
           group by base.upc) as pool
           where avg_units>=5
           and avg_cogs>0
           and regions >= 5                                    /* EDIT to focus on National Brands */
           )
           with data primary index (upc) on commit preserve rows;")

######################################################## Third Query ###########################################################

dbGetQuery(con,  "create volatile table insights_daily1 as                        
           (
           select a.upc
           ,c.NAT_LONG_DESC                 
           ,c.subcategory_desc 
           ,c.brand
           ,x.brand_name
           ,c.category_desc
           ,a.DAY_IDNT
           ,count(distinct a.store_number) as stores
           ,sum(a.TRANSACTION_CNT) as total_transactions
           ,(zeroifnull(sum(a.SALE_UNITS))+zeroifnull(sum(a.RETURN_SALE_UNITS))+zeroifnull(sum(a.MISC_SALE_UNITS))-zeroifnull(sum(a.ADJUST_UNITS)))  as net_units
           ,(zeroifnull(sum(a.SALE_VALUE))+zeroifnull(sum(a.RETURN_SALE_VALUE))+zeroifnull(sum(a.MISC_SALE_VALUE))+zeroifnull(sum(a.MARKDOWN_VALUE))-zeroifnull(sum(a.ADJUST_VALUE)))  as net_sales
           ,sum(a.TRANSACTION_CNT)/count(distinct a.store_number) as trans_store
           ,net_units/count(distinct a.store_number) as units_store
           ,(zeroifnull(sum(a.SALE_VALUE))+zeroifnull(sum(a.RETURN_SALE_VALUE))+zeroifnull(sum(a.MISC_SALE_VALUE))+zeroifnull(sum(a.MARKDOWN_VALUE))-zeroifnull(sum(a.ADJUST_VALUE))) /count(distinct a.store_number) as sales_store
           ,ALL_SB_DLRS/stores as sc_dlrs_store
           ,BASE_COGS_DLRS/stores as cogs_dlrs_store
           ,GIG_DLRS/stores as GIG_DLRS_store
           ,GM_DLRS/stores as GM_DLRS_store
           ,  ZEROIFNULL(SUM(a.SCANBACK_UNIT_AMT * a.SALE_UNITS)) +
           ZEROIFNULL(SUM(a.SCANBACK_UNIT_AMT * a.RETURN_SALE_UNITS)) +
           ZEROIFNULL(SUM(a.SCANBACK_PERCENT_AMT * a.SALE_UNITS)) +
           ZEROIFNULL(SUM(a.SCANBACK_PERCENT_AMT * a.RETURN_SALE_UNITS))   as ALL_SB_DLRS
           
           
           , ZEROIFNULL(SUM(a.AVG_COST * (a.SALE_UNITS + a.RETURN_SALE_UNITS)))
           AS BASE_COGS_DLRS
           
           , net_sales - BASE_COGS_DLRS
           AS GIG_DLRS
           
           , GIG_DLRS + ALL_SB_DLRS 
           AS GM_DLRS
           
           
           from (select * from EDW_R.DAILY_SALES_COST_SUMMARY_V    
           
           where upc in (select distinct upc from insights)                                            
           and DAY_IDNT between '2016-01-01' and '2018-10-03') as a                                   /* EDIT time period + 13 weeks or 91 days prior */
           inner join edw_r.location_v as b on a.store_number=b.store_number
           and b.region_id not in (1,-1)                                       /* Excludes UK and some of Canada */
           and b.THREE_SIX_FIVE  is null
           and b.store_closing_date is null
           and b.currency='USD'                                                /* Excludes remaining Canada stores */
           left join wdm_x.aa_ITEM_NATIONAL_HIERARCHY_V  as c on a.upc=c.nat_upc
           left join EDW_R.BRAND_V as x on c.brand = x.brand                                     /* V5 adds brand name */
           group by  a.upc
           ,c.NAT_LONG_DESC                 
           ,c.subcategory_desc 
           ,c.brand
           ,x.brand_name
           ,c.category_desc
           ,a.DAY_IDNT
           )
           with data primary index ( upc,NAT_LONG_DESC
           ,subcategory_desc 
           ,brand
           ,brand_name
           ,DAY_IDNT) on commit preserve rows;")


###################################################  FOURTH QUERY ##########################################################


dbGetQuery(con,  "Create volatile table arp_info as 
           (SELECT UPC, DAY_IDNT, AVERAGE(REG_PRICE) as ARP
           FROM DAILY_SALES_COST_SUMMARY_V
           WHERE UPC in (SELECT DIGIT_UPC FROM promo_info) AND DAY_IDNT NOT IN (SELECT DAY_IDNT FROM promo_info WHERE DIGIT_UPC = UPC)
           GROUP BY DAY_IDNT, UPC) with data primary index (DAY_IDNT
           ,UPC) on commit preserve rows;")


##################################################  FIFTH QUERY #############################################################

dbGetQuery(con, "Create volatile table hist_arp as
           (With temp2 as
           (SELECT UPC, MIN(DAY_IDNT) as min_day
           FROM arp_info
           GROUP BY UPC)
           SELECT temp2.UPC, temp2.min_day, arp_info.ARP
           FROM arp_info
           INNER JOIN temp2 ON (arp_info.UPC = temp2.UPC) AND (arp_info.DAY_IDNT = temp2.min_day)) with data primary index (UPC) on commit preserve rows;")

########################################### SIXTH QUERY #######################################################################
dbGetQuery( con, "create volatile table insights_test as                                            
            ( 
            select pool.*
            
            from (select base.upc
            ,count(base.region_id) as regions
            ,average(base.net_units) as avg_units
            ,average(base_cogs_dlrs) as avg_cogs
            
            from (select b.region_id
            ,a.upc
            ,sum(a.net_units) as net_units
            ,sum(a.BASE_COGS_DLRS) as BASE_COGS_DLRS
            
            from (select upc, day_idnt, store_number, (zeroifnull(sum(SALE_UNITS))+zeroifnull(sum(RETURN_SALE_UNITS))+zeroifnull(sum(MISC_SALE_UNITS))-zeroifnull(sum(ADJUST_UNITS)))  as net_units
            ,ZEROIFNULL(SUM(AVG_COST * (SALE_UNITS + RETURN_SALE_UNITS)))
            AS BASE_COGS_DLRS
            
            from EDW_R.DAILY_SALES_COST_SUMMARY_V as a
            where upc in ('0002392390076',
                                                                       '0002392390001',
            '0002392390002',
            '0002392390017',
            '0002392390024',
            '0002392392002',
            '0002392320301',
            '0002392320200',
            '0002392320209',
            '0002392320210',
            '0002392320213',
            '0002392321197',
            '0002392333498',
            '0002392320190',
            '0002392320196',
            '0002392333002',
            '0002392333003',
            '0002392333005',
            '0002392333008',
            '0002392333009',
            '0002392332001',
            '0002392332004',
            '0002392332011',
            '0002392332012',
            '0002392332013',
            '0002392332014',
            '0002392333032',
            '0002392333033',
            '0002392333034',
            '0002392333035',
            '0002392333062',
            '0002392333063',
            '0002392333064',
            '0002392341302',
            '0002392341303',
            '0002392341306',
            '0002392334003',
            '0002392334005',
            '0002392334460',
            '0002392334461',
            '0002392334462',
            '0002392333010',
            '0002392333011',
            '0002392333012',
            '0002392333013',
            '0002392333014',
            '0002392333041',
            '0002392333042',
            '0082969600053',
            '0082969600057',
            '0082969600054',
            '0082969600073',
            '0082969600074',
            '0082969600220',
            '0082969600221',
            '0082969600126',
            '0082969600047',
            '0082969600046',
            '0082969600049',
            '0082969600080',
            '0082969600081',
            '0082969600082',
            '0082969600083',
            '0082969600089',
            '0082969600170',
            '0082969600171',
            '0082969600070',
            '0082969600071',
            '0082969600125',
            '0082969600055',
            '0082969600056',
            '0002190845553',
            '0002190845557',
            '0002190845556',
            '0002190845551',
            '0002190845559',
            '0081570902120',
            '0081570902134',
            '0081570902131',
            '0081570902091',
            '0081570902133',
            '0081570902132',
            '0086369900012',
            '0085676900658',
            '0086369900010',
            '0086430500014',
            '0085606900526',
            '0085606900524',
            '0085606900527',
            '0085606900528',
            '0085606900512',
            '0085606900514',
            '0085606900513',
            '0085606900515',
            '0085606900529',
            '0085606900530',
            '0085606900540',
            '0085606900535',
            '0060418311010',
            '0060418311020',
            '0060418311040',
            '0060418311050',
            '0060418313040',
            '0060418311110',
            '0060418311120',
            '0060418311331',
            '0060418311071',
            '0060418311011',
            '0060418311030',
            '0060418313020',
            '0060418312170',
            '0060418312171',
            '0060418312172',
            '0060418312173',
            '0060418312174',
            '0060418312142',
            '0060418312143',
            '0060418312179',
            '0060418312175',
            '0060418312176',
            '0060418312181',
            '0060418312185',
            '0086430500017',
            '0086430500018',
            '0086430500019',
            '0086430500015',
            '0085759700327',
            '0085759700326',
            '0085759700325',
            '0085759700344',
            '0085759700341',
            '0085759700342',
            '0085759700398',
            '0081310402001',
            '0081310402006',
            '0081310402167',
            '0081310402188',
            '0081310402187',
            '0081310402185',
            '0085461500205',
            '0085461500210',
            '0085461500202',
            '0085461500206',
            '0081310402190',
            '0085109300407',
            '0085109300406',
            '0085109300409',
            '0085109300418',
            '0085109300419',
            '0085109300417',
            '0085546300530',
            '0085546300532',
            '0082926200001',
            '0082926200003',
            '0082926200002',
            '0082926200004',
            '0082926200008',
            '0082926200007',
            '0082926200009',
            '0082926200010',
            '0082926200020',
            '0082926200021',
            '0082926200022',
            '0082926200023',
            '0082926200031',
            '0082926200032',
            '0082926200094',
            '0082926200095',
            '0082926200096',
            '0082926200097',
            '0081570902180',
            '0081570902148',
            '0081570902182',
            '0081570902285',
            '0081570902149',
            '0081570902179',
            '0081570902080',
            '0081570902181',
            '0081570902286',
            '0081570902081',
            '0085068710005',
            '0018581400062',
            '0018581400061',
            '0018581400023',
            '0018581400137',
            '0018581400135',
            '0018581400136',
            '0018581400024',
            '0018581400025',
            '0085250500459',
            '0018581400026',
            '0018581400021',
            '0067729499112',
            '0067729499113',
            '0067729499114',
            '0067729499115',
            '0067729499116',
            '0067729499119',
            '0067729499120',
            '0085718300500',
            '0085718300503',
            '0085718300501',
            '0085718300502',
            '0085718300512',
            '0085718300536',
            '0085718300534',
            '0085718300537',
            '0085718300571',
            '0085718300564',
            '0081570902267',
            '0081570902265',
            '0081570902263',
            '0081570902269',
            '0081570902317',
            '0081570902316',
            '0089044400029',
            '0089044400028',
            '0089044400027',
            '0081692502000',
            '0081692502001',
            '0081692502002',
            '0085025100424',
            '0085025100453',
            '0085025100497',
            '0081692502066',
            '0085025100400',
            '0081692502039',
            '0085025100417',
            '0081692502063',
            '0081692502062',
            '0081692502003',
            '0081692502013',
            '0004157005413',
            '0004157005416',
            '0004157005418',
            '0004157006827',
            '0004157006836',
            '0004157006837',
            '0004157008974',
            '0004157008976',
            '0004157008977',
            '0074236500270',
            '0074236500434',
            '0074236500433',
            '0074236500318',
            '0008425324399',
            '0008425324400',
            '0008425324038',
            '0008425324040',
            '0008425324041',
            '0008425324044',
            '0008425324046',
            '0008425324047',
            '0008425324053',
            '0008425324301',
            '0008425324151',
            '0008425324154',
            '0008425324259',
            '0065722700050',
            '0065722701215',
            '0007336037341',
            '0007336023341',
            '0001299310201',
            '0007336032341',
            '0007336074341',
            '0007336061341',
            '0007336070341',
            '0001299310202',
            '0001299311202',
            '0001299311208',
            '0001299311203',
            '0001299311204',
            '0001299311205',
            '0001299311206',
            '0001299322130',
            '0001299322125',
            '0001299322120',
            '0001299322132',
            '0001299322133',
            '0001299322101',
            '0001299322102',
            '0001299322129',
            '0001299322103',
            '0001299322104',
            '0001299344201',
            '0007336077202',
            '0007336077201',
            '0007336077204',
            '0082926200033',
            '0082926200034',
            '0082926200035',
            '0082926200067',
            '0082926200068',
            '0082926200069',
            '0085307900501',
            '0085307900502',
            '0085307900504',
            '0085307900505',
            '0085307900503',
            '0085307900559',
            '0085307900558',
            '0085307900557',
            '0082926200011',
            '0082926200013',
            '0082926200012',
            '0082926200014',
            '0082926200018',
            '0082926200017',
            '0082926200019',
            '0082926200028',
            '0082926200024',
            '0082926200025',
            '0082926200026',
            '0082926200027',
            '0082926200029',
            '0082926200030',
            '0082926200099',
            '0082926200100',
            '0082926200101',
            '0082926200102',
            '0085307900560',
            '0085307900561'
            
            ) and day_idnt between '2016-01-01' and '2018-10-02'                                                                              /* EDIT Insights Time Period */
            group by upc, day_idnt, store_number)  as a 
            inner join edw_r.location_v as b on a.store_number=b.store_number
            and region_id not in (1,-1)              /* Excludes UK and some of Canada */
            and THREE_SIX_FIVE  is null
            and b.store_closing_date is null
            and b.currency='USD'                     /* Excludes remaining Canada stores */
            group by  b.region_id
            ,a.upc) as base
            group by base.upc) as pool
            where avg_units>=5
            and avg_cogs>0
            and regions >= 5
            /* EDIT to focus on National Brands */
            )
            with data primary index (upc) on commit preserve rows;")

################################################ SEVENTH QUERY ##############################################################

dbGetQuery(con, "create volatile table insights_daily_test3 as                        
           (
           select a.upc
           ,c.NAT_LONG_DESC                 
           ,c.subcategory_desc 
           ,c.brand
           ,x.brand_name
           ,c.category_desc
           ,a.DAY_IDNT
           ,count(distinct a.store_number) as stores
           ,sum(a.TRANSACTION_CNT) as total_transactions
           ,(zeroifnull(sum(a.SALE_UNITS))+zeroifnull(sum(a.RETURN_SALE_UNITS))+zeroifnull(sum(a.MISC_SALE_UNITS))-zeroifnull(sum(a.ADJUST_UNITS)))  as net_units
           ,(zeroifnull(sum(a.SALE_VALUE))+zeroifnull(sum(a.RETURN_SALE_VALUE))+zeroifnull(sum(a.MISC_SALE_VALUE))+zeroifnull(sum(a.MARKDOWN_VALUE))-zeroifnull(sum(a.ADJUST_VALUE)))  as net_sales
           ,sum(a.TRANSACTION_CNT)/count(distinct a.store_number) as trans_store
           ,net_units/count(distinct a.store_number) as units_store
           ,(zeroifnull(sum(a.SALE_VALUE))+zeroifnull(sum(a.RETURN_SALE_VALUE))+zeroifnull(sum(a.MISC_SALE_VALUE))+zeroifnull(sum(a.MARKDOWN_VALUE))-zeroifnull(sum(a.ADJUST_VALUE))) /count(distinct a.store_number) as sales_store
           ,ALL_SB_DLRS/stores as sc_dlrs_store
           ,BASE_COGS_DLRS/stores as cogs_dlrs_store
           ,GIG_DLRS/stores as GIG_DLRS_store
           ,GM_DLRS/stores as GM_DLRS_store
           ,  ZEROIFNULL(SUM(a.SCANBACK_UNIT_AMT * a.SALE_UNITS)) +
           ZEROIFNULL(SUM(a.SCANBACK_UNIT_AMT * a.RETURN_SALE_UNITS)) +
           ZEROIFNULL(SUM(a.SCANBACK_PERCENT_AMT * a.SALE_UNITS)) +
           ZEROIFNULL(SUM(a.SCANBACK_PERCENT_AMT * a.RETURN_SALE_UNITS))   as ALL_SB_DLRS
           
           
           , ZEROIFNULL(SUM(a.AVG_COST * (a.SALE_UNITS + a.RETURN_SALE_UNITS)))
           AS BASE_COGS_DLRS
           
           , net_sales - BASE_COGS_DLRS
           AS GIG_DLRS
           
           , GIG_DLRS + ALL_SB_DLRS 
           AS GM_DLRS
           
           
           from (select * from EDW_R.DAILY_SALES_COST_SUMMARY_V    
           
           where upc in (select distinct upc from insights_test)                                            
           and DAY_IDNT between '2016-01-01' and '2018-10-02') as a                                   /* EDIT time period + 13 weeks or 91 days prior */
           inner join edw_r.location_v as b on a.store_number=b.store_number
           and b.region_id not in (1,-1)                                       /* Excludes UK and some of Canada */
           and b.THREE_SIX_FIVE  is null
           and b.store_closing_date is null
           and b.currency='USD'                                                /* Excludes remaining Canada stores */
           left join wdm_x.aa_ITEM_NATIONAL_HIERARCHY_V  as c on a.upc=c.nat_upc
           left join EDW_R.BRAND_V as x on c.brand = x.brand                                     /* V5 adds brand name */
           group by  a.upc
           ,c.NAT_LONG_DESC                 
           ,c.subcategory_desc 
           ,c.brand
           ,x.brand_name
           ,c.category_desc
           ,a.DAY_IDNT
           )
           with data primary index ( upc,NAT_LONG_DESC
           ,subcategory_desc 
           ,brand
           ,brand_name
           ,DAY_IDNT) on commit preserve rows;")
#################################################################################################################################

dbGetQuery(con,"create volatile table insights_daily_test2 as (
           With temp2 as
           (SELECT d.DAY_IDNT, d.PROMO_WEEK, p.START_DATE, p.PROMO_PERIOD
           FROM ((EDW_R.PROMO_DAY_V as d
           INNER JOIN EDW_R.PROMO_WEEK_V as w ON d.PROMO_WEEK = w.PROMO_WEEK)
           INNER JOIN EDW_R.PROMO_PERIOD_V as p ON p.PROMO_PERIOD = w.PROMO_PERIOD))
           SELECT insights_daily_test3.* , temp2.PROMO_PERIOD FROM
           insights_daily_test3
           INNER JOIN temp2 ON temp2.DAY_IDNT = insights_daily_test3.DAY_IDNT)
           with data primary index (DAY_IDNT
           ,upc) on commit preserve rows;")
################################################ EIGTH QUERY #################################################################

dbGetQuery(con, "Create volatile table insights_stores as (With temp1 as (SELECT t.UPC, t.NAT_LONG_DESC, b.maxperiod FROM (SELECT UPC, MAX(PROMO_PERIOD) as maxperiod FROM insights_daily_test2 GROUP BY UPC) as b
           INNER JOIN insights_daily_test2 t ON t.UPC = b.UPC AND t.PROMO_PERIOD = b.maxperiod)
           SELECT DISTINCT d.UPC, d.DAY_IDNT, d.stores, d.NAT_LONG_DESC, d.PROMO_PERIOD
           FROM insights_daily_test2 d
           INNER JOIN temp1 ON temp1.maxperiod = d.PROMO_PERIOD AND temp1.UPC = d.UPC
) with data primary index (UPC, DAY_IDNT) on commit preserve rows;")




################################################ FEATURE SET ################################################################

test.cases.JANA<- dbGetQuery(con, "With temp1 as
                             (SELECT p.DIGIT_UPC, NAT_LONG_DESC, p.CATEGORY_DESC, p.SUBCATEGORY_DESC, p.BRAND, BRAND_NAME, p.DAY_IDNT, stores, total_transactions, net_units, net_sales, trans_store, units_store, 
                             
                             sales_store, sc_dlrs_store, cogs_dlrs_store, GIG_DLRS_STORE, GM_DLRS_store, ALL_SB_DLRS, BASE_COGS_DLRS, GIG_DLRS,
                             GM_DLRS, RETAIL_START_DATE, PROMO_PERIOD, PROMOTION_EVENT_ID, nbr_days_offshelf, nbr_periods_offshelf FROM promo_info as p
                             LEFT JOIN insights_daily1 as i  ON (i.upc= p.DIGIT_UPC) AND (i.DAY_IDNT = p.DAY_IDNT)
                             WHERE PROMO_LEVEL = 'Off Shelf'),
                             temp2 as
                             (SELECT NAT_UPC, CALENDAR_DATE, AVERAGE(ARP_going_in) as ARP_going_in
                             FROM WDM_X.mft_region_baseline_draft
                             WHERE NAT_UPC in (SELECT DIGIT_UPC from promo_info)
                             GROUP BY NAT_UPC, CALENDAR_DATE),
                             temp3 as
                             (SELECT UPC, PROMO_WEEK, AVERAGE(COMP_ADJ_PRICE) as comp_arp, AVERAGE(WFM_COMP_INDEX) as comp_index
                             FROM wdm_x.E3_COMP_SHOP_RPT
                             WHERE UPC in (SELECT DIGIT_UPC from promo_info)
                             GROUP BY UPC, PROMO_WEEK),
                             temp4 as
                             (SELECT NAT_UPC, CALENDAR_DATE, AVERAGE(sindex) as sindex
                             FROM WDM_X.mft_region_baseline_draft
                             WHERE NAT_UPC in (SELECT DIGIT_UPC from promo_info) AND CALENDAR_DATE = '2017-01-11'
                             GROUP BY NAT_UPC, CALENDAR_DATE)
                             SELECT temp1.*, hist_arp.ARP, temp2.ARP_going_in, temp4.sindex, temp3.comp_arp, temp3.comp_index, insights_stores.stores as stores_rec FROM
                             ((temp1 
                             LEFT JOIN hist_arp ON temp1.DIGIT_UPC = hist_arp.UPC)
                             LEFT JOIN temp2 ON (temp1.DIGIT_UPC = temp2.NAT_UPC) AND (temp1.DAY_IDNT = temp2.CALENDAR_DATE))
                             LEFT JOIN temp3 ON (temp1.DIGIT_UPC = temp3.UPC) AND (temp1.PROMO_PERIOD = temp3.PROMO_WEEK)
                             LEFT JOIN temp4 ON temp1.DIGIT_UPC = temp4.NAT_UPC
                             LEFT JOIN insights_stores ON temp1.DIGIT_UPC = insights_stores.UPC
                             ORDER BY temp1.DAY_IDNT")
dbDisconnect(con)


######## Aggregate by promo period and UPC #############
test.cases.JANA<- test.cases.JANA[!is.na(test.cases.JANA$BRAND_NAME)|test.cases.JANA$PROMO_PERIOD>201824,]

test.cases.JANA$delta_arp<- ifelse(is.na(test.cases.JANA$ARP_going_in-test.cases.JANA$ARP), 0, test.cases.JANA$ARP_going_in - test.cases.JANA$ARP)
test.cases.JANA$comp_arp<- ifelse(is.na(test.cases.JANA$comp_arp), 0, test.cases.JANA$comp_arp)
test.cases.JANA$comp_index<- ifelse(is.na(test.cases.JANA$comp_index), 0, test.cases.JANA$comp_index)
test.cases.JANA$sindex<- ifelse(is.na(test.cases.JANA$sindex ), 0, test.cases.JANA$sindex)
test.cases.JANA$stores_rec<- ifelse(is.na(test.cases.JANA$stores_rec ), 0, test.cases.JANA$stores_rec)
test.cases.JANA$BRAND_NAME<- ifelse(is.na(test.cases.JANA$BRAND_NAME ), test.cases.JANA$BRAND, test.cases.JANA$BRAND_NAME)
test.cases.JANA$UPC<- test.cases.JANA$DIGIT_UPC

test.cases.JANA$stores_rec<- ifelse(test.cases.JANA$PROMO_PERIOD<201824,0,test.cases.JANA$stores_rec)

test.cases.JANA$stores_selling_mod<- ifelse(test.cases.JANA$stores_rec == 0, test.cases.JANA$stores, test.cases.JANA$stores_rec)
test.cases.JANA<- test.cases.JANA[!is.na(test.cases.JANA$stores_selling_mod),]

test.cases.JANA.a<- aggregate(list(test.cases.JANA$delta_arp, test.cases.JANA$stores_selling_mod,test.cases.JANA$comp_index,test.cases.JANA$comp_arp,test.cases.JANA$sindex,test.cases.JANA$nbr_days_offshelf),
                         by=list(test.cases.JANA$UPC, test.cases.JANA$BRAND, test.cases.JANA$CATEGORY_DESC,test.cases.JANA$PROMO_PERIOD,
                                 test.cases.JANA$PROMOTION_EVENT_ID), FUN = mean)
## rename columns in features data frame
colnames(test.cases.JANA.a)<-c("upc","brand","category","promo_period","promo_event_id","delta_arp",
                          "stores_selling", "comp_index", "comp_arp","seasonal_index","nbr_days_offshelf")

## min-max normalization

test.cases.JANA.a$stores_selling.n<-(test.cases.JANA.a$stores_selling-min(test.cases.JANA.a$stores_selling))/(max(test.cases.JANA.a$stores_selling)-min(test.cases.JANA.a$stores_selling))
test.cases.JANA.a$delta_arp.n<-(test.cases.JANA.a$delta_arp-min(test.cases.JANA.a$delta_arp))/(max(test.cases.JANA.a$delta_arp)-min(test.cases.JANA.a$delta_arp))
test.cases.JANA.a$comp_index.n<-(test.cases.JANA.a$comp_index-min(test.cases.JANA.a$comp_index))/(max(test.cases.JANA.a$comp_index)-min(test.cases.JANA.a$comp_index))
test.cases.JANA.a$comp_arp.n<-(test.cases.JANA.a$comp_arp-min(test.cases.JANA.a$comp_arp))/(max(test.cases.JANA.a$comp_arp)-min(test.cases.JANA.a$comp_arp))
test.cases.JANA.a$seasonal_index.n<-(test.cases.JANA.a$seasonal_index-min(test.cases.JANA.a$seasonal_index))/(max(test.cases.JANA.a$seasonal_index)-min(test.cases.JANA.a$seasonal_index))
test.cases.JANA.a$nbr_days_offshelf.n<-(test.cases.JANA.a$nbr_days_offshelf-min(test.cases.JANA.a$nbr_days_offshelf))/(max(test.cases.JANA.a$nbr_days_offshelf)-min(test.cases.JANA.a$nbr_days_offshelf))

## remove uneeded features ###
test.cases.JANA.model<-test.cases.JANA.a[,-c(4,5)]
test.cases.JANA.a<-test.cases.JANA.a[,-c(5,6,7,8,9,10,11)]

test.cases.JANA.model<- test.cases.JANA.a[test.cases.JANA.a$upc %in% c('0002392390076',
                                                                       '0002392390001',
                                                                       '0002392390002',
                                                                       '0002392390017',
                                                                       '0002392390024',
                                                                       '0002392392002',
                                                                       '0002392320301',
                                                                       '0002392320200',
                                                                       '0002392320209',
                                                                       '0002392320210',
                                                                       '0002392320213',
                                                                       '0002392321197',
                                                                       '0002392333498',
                                                                       '0002392320190',
                                                                       '0002392320196',
                                                                       '0002392333002',
                                                                       '0002392333003',
                                                                       '0002392333005',
                                                                       '0002392333008',
                                                                       '0002392333009',
                                                                       '0002392332001',
                                                                       '0002392332004',
                                                                       '0002392332011',
                                                                       '0002392332012',
                                                                       '0002392332013',
                                                                       '0002392332014',
                                                                       '0002392333032',
                                                                       '0002392333033',
                                                                       '0002392333034',
                                                                       '0002392333035',
                                                                       '0002392333062',
                                                                       '0002392333063',
                                                                       '0002392333064',
                                                                       '0002392341302',
                                                                       '0002392341303',
                                                                       '0002392341306',
                                                                       '0002392334003',
                                                                       '0002392334005',
                                                                       '0002392334460',
                                                                       '0002392334461',
                                                                       '0002392334462',
                                                                       '0002392333010',
                                                                       '0002392333011',
                                                                       '0002392333012',
                                                                       '0002392333013',
                                                                       '0002392333014',
                                                                       '0002392333041',
                                                                       '0002392333042',
                                                                       '0082969600053',
                                                                       '0082969600057',
                                                                       '0082969600054',
                                                                       '0082969600073',
                                                                       '0082969600074',
                                                                       '0082969600220',
                                                                       '0082969600221',
                                                                       '0082969600126',
                                                                       '0082969600047',
                                                                       '0082969600046',
                                                                       '0082969600049',
                                                                       '0082969600080',
                                                                       '0082969600081',
                                                                       '0082969600082',
                                                                       '0082969600083',
                                                                       '0082969600089',
                                                                       '0082969600170',
                                                                       '0082969600171',
                                                                       '0082969600070',
                                                                       '0082969600071',
                                                                       '0082969600125',
                                                                       '0082969600055',
                                                                       '0082969600056',
                                                                       '0002190845553',
                                                                       '0002190845557',
                                                                       '0002190845556',
                                                                       '0002190845551',
                                                                       '0002190845559',
                                                                       '0081570902120',
                                                                       '0081570902134',
                                                                       '0081570902131',
                                                                       '0081570902091',
                                                                       '0081570902133',
                                                                       '0081570902132',
                                                                       '0086369900012',
                                                                       '0085676900658',
                                                                       '0086369900010',
                                                                       '0086430500014',
                                                                       '0085606900526',
                                                                       '0085606900524',
                                                                       '0085606900527',
                                                                       '0085606900528',
                                                                       '0085606900512',
                                                                       '0085606900514',
                                                                       '0085606900513',
                                                                       '0085606900515',
                                                                       '0085606900529',
                                                                       '0085606900530',
                                                                       '0085606900540',
                                                                       '0085606900535',
                                                                       '0060418311010',
                                                                       '0060418311020',
                                                                       '0060418311040',
                                                                       '0060418311050',
                                                                       '0060418313040',
                                                                       '0060418311110',
                                                                       '0060418311120',
                                                                       '0060418311331',
                                                                       '0060418311071',
                                                                       '0060418311011',
                                                                       '0060418311030',
                                                                       '0060418313020',
                                                                       '0060418312170',
                                                                       '0060418312171',
                                                                       '0060418312172',
                                                                       '0060418312173',
                                                                       '0060418312174',
                                                                       '0060418312142',
                                                                       '0060418312143',
                                                                       '0060418312179',
                                                                       '0060418312175',
                                                                       '0060418312176',
                                                                       '0060418312181',
                                                                       '0060418312185',
                                                                       '0086430500017',
                                                                       '0086430500018',
                                                                       '0086430500019',
                                                                       '0086430500015',
                                                                       '0085759700327',
                                                                       '0085759700326',
                                                                       '0085759700325',
                                                                       '0085759700344',
                                                                       '0085759700341',
                                                                       '0085759700342',
                                                                       '0085759700398',
                                                                       '0081310402001',
                                                                       '0081310402006',
                                                                       '0081310402167',
                                                                       '0081310402188',
                                                                       '0081310402187',
                                                                       '0081310402185',
                                                                       '0085461500205',
                                                                       '0085461500210',
                                                                       '0085461500202',
                                                                       '0085461500206',
                                                                       '0081310402190',
                                                                       '0085109300407',
                                                                       '0085109300406',
                                                                       '0085109300409',
                                                                       '0085109300418',
                                                                       '0085109300419',
                                                                       '0085109300417',
                                                                       '0085546300530',
                                                                       '0085546300532',
                                                                       '0082926200001',
                                                                       '0082926200003',
                                                                       '0082926200002',
                                                                       '0082926200004',
                                                                       '0082926200008',
                                                                       '0082926200007',
                                                                       '0082926200009',
                                                                       '0082926200010',
                                                                       '0082926200020',
                                                                       '0082926200021',
                                                                       '0082926200022',
                                                                       '0082926200023',
                                                                       '0082926200031',
                                                                       '0082926200032',
                                                                       '0082926200094',
                                                                       '0082926200095',
                                                                       '0082926200096',
                                                                       '0082926200097',
                                                                       '0081570902180',
                                                                       '0081570902148',
                                                                       '0081570902182',
                                                                       '0081570902285',
                                                                       '0081570902149',
                                                                       '0081570902179',
                                                                       '0081570902080',
                                                                       '0081570902181',
                                                                       '0081570902286',
                                                                       '0081570902081',
                                                                       '0085068710005',
                                                                       '0018581400062',
                                                                       '0018581400061',
                                                                       '0018581400023',
                                                                       '0018581400137',
                                                                       '0018581400135',
                                                                       '0018581400136',
                                                                       '0018581400024',
                                                                       '0018581400025',
                                                                       '0085250500459',
                                                                       '0018581400026',
                                                                       '0018581400021',
                                                                       '0067729499112',
                                                                       '0067729499113',
                                                                       '0067729499114',
                                                                       '0067729499115',
                                                                       '0067729499116',
                                                                       '0067729499119',
                                                                       '0067729499120',
                                                                       '0085718300500',
                                                                       '0085718300503',
                                                                       '0085718300501',
                                                                       '0085718300502',
                                                                       '0085718300512',
                                                                       '0085718300536',
                                                                       '0085718300534',
                                                                       '0085718300537',
                                                                       '0085718300571',
                                                                       '0085718300564',
                                                                       '0081570902267',
                                                                       '0081570902265',
                                                                       '0081570902263',
                                                                       '0081570902269',
                                                                       '0081570902317',
                                                                       '0081570902316',
                                                                       '0089044400029',
                                                                       '0089044400028',
                                                                       '0089044400027',
                                                                       '0081692502000',
                                                                       '0081692502001',
                                                                       '0081692502002',
                                                                       '0085025100424',
                                                                       '0085025100453',
                                                                       '0085025100497',
                                                                       '0081692502066',
                                                                       '0085025100400',
                                                                       '0081692502039',
                                                                       '0085025100417',
                                                                       '0081692502063',
                                                                       '0081692502062',
                                                                       '0081692502003',
                                                                       '0081692502013',
                                                                       '0004157005413',
                                                                       '0004157005416',
                                                                       '0004157005418',
                                                                       '0004157006827',
                                                                       '0004157006836',
                                                                       '0004157006837',
                                                                       '0004157008974',
                                                                       '0004157008976',
                                                                       '0004157008977',
                                                                       '0074236500270',
                                                                       '0074236500434',
                                                                       '0074236500433',
                                                                       '0074236500318',
                                                                       '0008425324399',
                                                                       '0008425324400',
                                                                       '0008425324038',
                                                                       '0008425324040',
                                                                       '0008425324041',
                                                                       '0008425324044',
                                                                       '0008425324046',
                                                                       '0008425324047',
                                                                       '0008425324053',
                                                                       '0008425324301',
                                                                       '0008425324151',
                                                                       '0008425324154',
                                                                       '0008425324259',
                                                                       '0065722700050',
                                                                       '0065722701215',
                                                                       '0007336037341',
                                                                       '0007336023341',
                                                                       '0001299310201',
                                                                       '0007336032341',
                                                                       '0007336074341',
                                                                       '0007336061341',
                                                                       '0007336070341',
                                                                       '0001299310202',
                                                                       '0001299311202',
                                                                       '0001299311208',
                                                                       '0001299311203',
                                                                       '0001299311204',
                                                                       '0001299311205',
                                                                       '0001299311206',
                                                                       '0001299322130',
                                                                       '0001299322125',
                                                                       '0001299322120',
                                                                       '0001299322132',
                                                                       '0001299322133',
                                                                       '0001299322101',
                                                                       '0001299322102',
                                                                       '0001299322129',
                                                                       '0001299322103',
                                                                       '0001299322104',
                                                                       '0001299344201',
                                                                       '0007336077202',
                                                                       '0007336077201',
                                                                       '0007336077204',
                                                                       '0082926200033',
                                                                       '0082926200034',
                                                                       '0082926200035',
                                                                       '0082926200067',
                                                                       '0082926200068',
                                                                       '0082926200069',
                                                                       '0085307900501',
                                                                       '0085307900502',
                                                                       '0085307900504',
                                                                       '0085307900505',
                                                                       '0085307900503',
                                                                       '0085307900559',
                                                                       '0085307900558',
                                                                       '0085307900557',
                                                                       '0082926200011',
                                                                       '0082926200013',
                                                                       '0082926200012',
                                                                       '0082926200014',
                                                                       '0082926200018',
                                                                       '0082926200017',
                                                                       '0082926200019',
                                                                       '0082926200028',
                                                                       '0082926200024',
                                                                       '0082926200025',
                                                                       '0082926200026',
                                                                       '0082926200027',
                                                                       '0082926200029',
                                                                       '0082926200030',
                                                                       '0082926200099',
                                                                       '0082926200100',
                                                                       '0082926200101',
                                                                       '0082926200102',
                                                                       '0085307900560',
                                                                       '0085307900561'),]

library(dplyr)
test.cases.JANA.model<-test.cases.JANA.model %>%
  group_by(upc) %>%
  filter(promo_period==max(promo_period)) %>% as.data.frame


##### narrow down to just model features ##########

test.cases.JANA.model<-test.cases.JANA.model[,-4]
test.cases.JANA.features.only<-test.cases.JANA.model[,-c(1,2,7)]

###### run model #########
load("model.revised.RF.smote.RData")

final.JANA<- predict(object = model.revised.RF.smote, test.cases.JANA.features.only, type = "prob")

final.ouput<-cbind(final.JANA,test.cases.JANA.model[,c(1,2)])
write.csv(final.ouput, "JANA_Predictions3.csv")
